generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int      @id @default(autoincrement())
  name        String
  email       String   @unique
  password    String
  role        Role
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  orders      Order[]
  reviews     Review[]
  cartItems   CartItem[]
  wishlist    Wishlist[]
}

model Product {
  id           Int            @id @default(autoincrement())
  name         String
  description  String
  price        Float
  images       Image[]
  category     Category       @relation(fields: [categoryId], references: [id])
  categoryId   Int
  tags         Tag[]          @relation("ProductTags")
  inventory    Inventory?
  reviews      Review[]
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  cartItems    CartItem[]
  wishlist     Wishlist[]
  orderProducts OrderProduct[]
}

model Order {
  id          Int        @id @default(autoincrement())
  user        User       @relation(fields: [userId], references: [id])
  userId      Int
  products    OrderProduct[]
  totalAmount Float
  status      OrderStatus
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model OrderProduct {
  id        Int      @id @default(autoincrement())
  order     Order    @relation(fields: [orderId], references: [id])
  orderId   Int
  product   Product  @relation(fields: [productId], references: [id])
  productId Int
  quantity  Int
}

model Review {
  id          Int       @id @default(autoincrement())
  rating      Int
  comment     String
  user        User      @relation(fields: [userId], references: [id])
  userId      Int
  product     Product   @relation(fields: [productId], references: [id])
  productId   Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Inventory {
  id          Int      @id @default(autoincrement())
  product     Product  @relation(fields: [productId], references: [id])
  productId   Int      @unique
  quantity    Int
  lowStockAlert Boolean @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model CartItem {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  product   Product  @relation(fields: [productId], references: [id])
  productId Int
  quantity  Int
}

model Wishlist {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  product   Product  @relation(fields: [productId], references: [id])
  productId Int
}

model Category {
  id        Int       @id @default(autoincrement())
  name      String
  products  Product[]
}

model Tag {
  id        Int       @id @default(autoincrement())
  name      String
  products  Product[] @relation("ProductTags")
}

model Image {
  id          Int      @id @default(autoincrement())
  url         String
  product     Product  @relation(fields: [productId], references: [id])
  productId   Int
}

enum Role {
  ADMIN
  VENDOR
  CUSTOMER
}

enum OrderStatus {
  PENDING
  SHIPPED
  DELIVERED
  CANCELLED
}